package model;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URISyntaxException;

import algorithms.mazeGenerators.Maze3dGenerator;
import algorithms.mazeGenerators.Position;
import algorithms.search.Solution;
import presenter.MazeGeneratorTypes;
import presenter.MazeSearcherTypes;
import presenter.Properties;
import presenter.ViewTypes;

/**
 * @author Nir Leibovitch
 * <h1>Model layer Façade</h1>
 */
public interface Model {
	/**
	 * Load properties file &amp; instantiate a {@link Properties object}
	 * @param fileName Path to the properties file
	 * @throws URISyntaxException When the path can't be parsed
	 * @throws FileNotFoundException When the file can't be opened for reading
	 * @throws IOException When the cannot be read into properties
	 * @see Model#getProperties()
	 */
	void loadProperties(String fileName) throws URISyntaxException, FileNotFoundException, IOException;
	/**
	 * Get the properties object instantiated by {@link Model#loadProperties(String)}
	 * @return Properties Properties object
	 * @see Model#loadProperties(String)
	 */
	Properties getProperties();
	
	/**
	 * Set the maze generator algorithm to be used by the model Façade instance
	 * @param mazeGenerator Maze generator
	 */
	void setMazeGenerator(Maze3dGenerator mazeGenerator);
	
	/**
	 * Start the model Façade instance and create a thread pool of the given size 
	 * @param poolSize Size of the thread pool
	 * @return boolean Whether the model started successfully 
	 * @see Model#stop()
	 */
	boolean start(int poolSize);
	/**
	 * Stop the model Façade instance, cancel any pending threads &amp; abort any running
	 * threads
	 * <br>Blocking.
	 * @see Model#start(int)
	 */
	void stop();
	
	/**
	 * Calculate the list of files under the given directory
	 * @param path Directory path
	 * @see Model#getFilesList()
	 */
	void listFiles(String path);
	/**
	 * Get the list of files calculated by {@link Model#listFiles(String)}
	 * @return List of file paths
	 * @see Model#listFiles(String)
	 */
	String[] getFilesList();
	
	/**
	 * Generate a 3d maze with the given internal dimensions using the maze generator
	 * set by {@link Model#setMazeGenerator(Maze3dGenerator)} and name it for later reference
	 * @param name Name for the generated maze
	 * @param width Maze internal width
	 * @param height Maze internal height
	 * @param depth Maze internal depth
	 * @see Model#getMazeData(String)
	 */
	void generateMaze(String name, int width, int height, int depth);
	/**
	 * Get compressed data of the maze generated by
	 * {@link Model#generateMaze(String, int, int, int)} or loaded by
	 * {@link Model#loadMaze(String, String)}
	 * @param name Name of a maze
	 * @return byte[] Compressed data of the maze
	 * @throws IOException When compressing the data fails
	 * @see Model#generateMaze(String, int, int, int)
	 * @see Model#loadMaze(String, String)
	 */
	byte[] getMazeData(String name) throws IOException;

	/**
	 * Calculate a cross section of a maze generated by
	 * {@link Model#generateMaze(String, int, int, int)} or loaded by
	 * {@link Model#loadMaze(String, String)} for the given axis &amp; index
	 * @param name Name of a maze
	 * @param axis Axis of the cross section
	 * @param index Index of the cross section
	 * @see Model#getCrossSection()
	 * @see Model#generateMaze(String, int, int, int)
	 * @see Model#loadMaze(String, String)
	 */
	void calculateCrossSection(String name, String axis, int index);
	/**
	 * Get the cross section data calculated by
	 * {@link Model#calculateCrossSection(String, String, int)}
	 * @return int[][] Cross section data
	 * @see Model#calculateCrossSection(String, String, int)
	 */
	int[][] getCrossSection();

	/**
	 * Save a named maze generated by {@link Model#generateMaze(String, int, int, int)} or
	 * loaded by {@link Model#loadMaze(String, String)} to the given file path
	 * @param name Name of a maze
	 * @param fileName File path
	 * @see Model#generateMaze(String, int, int, int)
	 * @see Model#loadMaze(String, String)
	 */
	void saveMaze(String name, String fileName);
	/**
	 * Load a maze from a file containing compressed maze data saved by
	 * {@link Model#saveMaze(String, String)} &amp; name it for later reference
	 * @param fileName File path
	 * @param name Name for the loaded maze
	 * @see Model#saveMaze(String, String)
	 */
	void loadMaze(String fileName, String name);

	/**
	 * Calculate the (uncompressed) size of a named maze generated by
	 * {@link Model#generateMaze(String, int, int, int)} or loaded by
	 * {@link Model#loadMaze(String, String)}
	 * @param name Name of a maze
	 * @see Model#getMazeSize(String)
	 * @see Model#generateMaze(String, int, int, int)
	 * @see Model#loadMaze(String, String)
	 */
	void calculateMazeSize(String name);
	/**
	 * Get the maze size calculated by {@link Model#getMazeSize(String)}
	 * @param name Name of a maze
	 * @return int Size of the maze
	 * @see Model#getMazeSize(String)
	 */
	int getMazeSize(String name);

	/**
	 * Calculate the (compressed) size of a named maze generated by
	 * {@link Model#generateMaze(String, int, int, int)} or loaded by
	 * {@link Model#loadMaze(String, String)}
	 * @param name Name of a maze
	 * @see Model#getFileSize(String)
	 * @see Model#generateMaze(String, int, int, int)
	 * @see Model#loadMaze(String, String)
	 */
	void calculateFileSize(String name);
	/**
	 * Get the maze file size calculated by {@link Model#calculateFileSize(String)}
	 * @param name Name of a maze
	 * @return Size of maze file
	 * @see Model#calculateFileSize(String)
	 */
	int getFileSize(String name);
	
	/**
	 * Solve a named maze  generated by
	 * {@link Model#generateMaze(String, int, int, int)} or loaded by
	 * {@link Model#loadMaze(String, String)} from the start of the maze
	 * @param name Name of a maze
	 * @see Model#getMazeSolution(String)
	 * @see Model#solveMaze(String, Position)
	 * @see Model#solveMaze(String, int, int, int)
	 * @see Model#generateMaze(String, int, int, int)
	 * @see Model#loadMaze(String, String)
	 */
	void solveMaze(String name);
	/**
	 * Solve a named maze generated by
	 * {@link Model#generateMaze(String, int, int, int)} or loaded by
	 * {@link Model#loadMaze(String, String)} from the given x,y,z coordinates
	 * @param name Name of a maze
	 * @param fromX Solution start X coordinate
	 * @param fromY Solution start Y coordinate
	 * @param fromZ Solution start Z coordinate
	 * @see Model#getMazeSolution(String, int, int, int)
	 * @see Model#solveMaze(String)
	 * @see Model#solveMaze(String, Position)
	 * @see Model#generateMaze(String, int, int, int)
	 * @see Model#loadMaze(String, String)
	 */
	void solveMaze(String name, int fromX, int fromY, int fromZ);
	/**
	 * Solve a named maze generated by
	 * {@link Model#generateMaze(String, int, int, int)} or loaded by
	 * {@link Model#loadMaze(String, String)} from the given position
	 * @param name Name of a maze
	 * @param from Solution start position
	 * @see Model#getMazeSolution(String, Position)
	 * @see Model#solveMaze(String)
	 * @see Model#solveMaze(String, int, int, int)
	 * @see Model#generateMaze(String, int, int, int)
	 * @see Model#loadMaze(String, String)
	 */
	void solveMaze(String name, Position from);
	
	/**
	 * Get the solution to a named maze generated by
	 * {@link Model#generateMaze(String, int, int, int)} or loaded by
	 * {@link Model#loadMaze(String, String)} and solved by {@link Model#solveMaze(String)}from
	 * the start of the maze
	 * @param name Name of a maze
	 * @return Solution&lt;Position&gt; Solution for the maze
	 * @see Model#solveMaze(String)
	 * @see Model#getMazeSolution(String, Position)
	 * @see Model#getMazeSolution(String, int, int, int)
	 * @see Model#generateMaze(String, int, int, int)
	 * @see Model#loadMaze(String, String)
	 */
	Solution<Position> getMazeSolution(String name);
	/**
	 * Get the solution to a named maze generated by
	 * {@link Model#generateMaze(String, int, int, int)} or loaded by
	 * {@link Model#loadMaze(String, String)} and solved by
	 * {@link Model#solveMaze(String, int, int, int)} from the given x,y,z coordinates
	 * @param name Name of a maze
	 * @param fromX Solution start X coordinate
	 * @param fromY Solution start Y coordinate
	 * @param fromZ Solution start Z coordinate
	 * @return Solution&lt;Position&gt; Solution for the maze from the given coordinates
	 * @see Model#solveMaze(String, int, int, int)
	 * @see Model#getMazeSolution(String)
	 * @see Model#getMazeSolution(String, Position)
	 * @see Model#generateMaze(String, int, int, int)
	 * @see Model#loadMaze(String, String)
	 */
	Solution<Position> getMazeSolution(String name, int fromX, int fromY, int fromZ);
	/**
	 * Get the solution to a named maze generated by
	 * {@link Model#generateMaze(String, int, int, int)} or loaded by
	 * {@link Model#loadMaze(String, String)} and solved by
	 * {@link Model#solveMaze(String, Position)} from the given position
	 * @param name Name of a maze
	 * @param from Solution start position
	 * @return Solution&lt;Position&gt; Solution for the maze from the given position
	 * @see Model#solveMaze(String, Position)
	 * @see Model#getMazeSolution(String)
	 * @see Model#getMazeSolution(String, int, int, int)
	 * @see Model#generateMaze(String, int, int, int)
	 * @see Model#loadMaze(String, String)
	 */
	Solution<Position> getMazeSolution(String name, Position from);
	
	/**
	 * Instantiate a Properties object with the given data &amp; save it to the given file path
	 * @param fileName File path
	 * @param poolSize Size of the thread pool
	 * @param generator Type of maze generator to use
	 * @param searcher Type of maze searcher to use
	 * @param viewType Type of view to show
	 */
	void saveProperties(String fileName, int poolSize,
			MazeGeneratorTypes generator, MazeSearcherTypes searcher, ViewTypes viewType);
}
